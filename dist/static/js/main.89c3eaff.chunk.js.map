{"version":3,"sources":["components/layout/SignedOutLinks.js","components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/Navbar.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Notifications.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["SignedOutLinks","className","to","connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","onClick","profile","initials","state","console","log","firebase","links","uid","ProjectSummary","project","title","authorFirstName","authorLastName","moment","createdAt","toDate","calendar","ProjectList","projects","map","id","key","Notifications","notifications","item","user","content","time","fromNow","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","REACT_MEASUREMENT_ID","initializeApp","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reactReduxFirebase","fbConfig","useFirestoreForProfile","userProfile","attachAuthIsReady","reduxFirestore","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89c3eaff.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\n\n\n        const SignedOutLinks = () =>{\n            return(\n            <ul className=\"right\">\n                <li> <NavLink to='/signup'>Sign Up </NavLink></li>\n                <li> <NavLink to='/signin'>Login </NavLink></li>\n                \n            </ul>\n            )\n        }\n\nexport default SignedOutLinks;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n//we wanna dispatch action creator here to signout\nimport { connect } from 'react-redux'\nimport { signOut } from '../../store/actions/authActions'\n\nconst SignedInLinks = (props) =>{//this is a funcitonal component and need to take the props in\n    return (\n        <div>\n          <ul className=\"right\">\n            <li><NavLink to='/create'>New Project</NavLink></li>\n            <li><a onClick={props.signOut}>Log Out</a></li>\n            <li><NavLink to='/' className=\"btn btn-floating pink lighten-1\">\n              {props.profile.initials}\n            </NavLink></li>\n          </ul>\n        </div>\n      )\n    }\n\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        signOut: () => dispatch(signOut())//we imported signOut()\n    }\n}\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","export const signIn =(credentials) =>{\n    return (dispatch, getState, {getFirebase}) =>{\n        const firebase = getFirebase();\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(()=>{\n            dispatch({type: 'LOGIN_SUCCESS'});\n        }).catch((err)=>{\n            dispatch({type: 'LOGIN_ERROR', err});\n        });\n    }\n}\n\nexport const signOut = () => {//this is a function\n    return (dispatch, getState, {getFirebase}) =>{\n        const firebase = getFirebase();//initialize firebase\n        \n        firebase.auth().signOut().then(() => {\n            dispatch({type:'SIGNOUT_SUCCESS'});//then we need to dispatch this from navbar\n        });\n    }\n}\n\nexport const signUp = (newUser) =>{\n    //need to store user info to user collection in firestore\n    return (dispatch, getState, {getFirebase, getFirestore}) =>{\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        //use this to generate new users\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password// will communicate with firebase, asychonise \n        ).then((resp) =>{\n            return firestore.collection('users').doc(resp.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0]+newUser.lastName[0]//better to store this info \n            }).then(()=>{\n                dispatch({type: 'SIGNUP_SUCCESS'})\n            })\n        }).catch(err=>{\n            dispatch({type: 'SIGNUP_ERROR', err})\n            \n        })\n    }\n}\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport SignedOutLinks from './SignedOutLinks';\nimport SignedInLinks from './SignedInLinks';\nimport { connect } from 'react-redux'\n\n\n        const Navbar = (props) =>{\n            //destructure to get auth property\n            const {auth, profile}= props;\n            const links = auth.uid? <SignedInLinks profile={profile} /> : <SignedOutLinks />\n\n            return(\n            <nav className=\"nav-wrapper grey darken-3\">\n                <div className=\"container\">\n                <Link to='/' className=\"brand-logo\">Mario Plan</Link>\n                {links}\n            </div>\n            </nav>\n            )\n        }\n\n        const mapStateToProps = (state) =>{\n            console.log(state);\n            return{\n                auth: state.firebase.auth,\n                profile: state.firebase.profile\n            }\n        }\n\nexport default connect(mapStateToProps) (Navbar);","  \nimport React from 'react'\nimport moment from 'moment'\n\nconst ProjectSummary = ({project}) => {\n  return (\n    <div className=\"card z-depth-0 project-summary\">\n      <div className=\"card-content grey-text text-darken-3\">\n        <span className=\"card-title \">{project.title}</span>\n        <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\n        <p className=\"grey-text\">{moment(project.createdAt.toDate()).calendar()}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectSummary","import React from 'react'\nimport ProjectSummary from './ProjectSummary'\nimport { Link } from 'react-router-dom'\n\nconst ProjectList = ({projects}) => {\n  return (\n    <div className=\"project-list section\">\n      { projects && projects.map(project => {\n        return (\n          <Link to={'/project/' + project.id} key={project.id}>\n            <ProjectSummary project={project}  />\n          </Link>\n        )\n      })}  \n    </div>\n  )\n}\n\nexport default ProjectList","import React from 'react'\nimport moment from 'moment'\n\nconst Notifications = (props) => {\n  const {notifications} = props;\n  return (\n    <div className = \"section\">\n     <div className = \"card z-depth-0\">\n       <div className = \" card-content\">\n         <span className=\"card-title\"> Notifications </span>\n         <ul className=\"notifications\">\n           {notifications && notifications.map(item=>{\n             return (\n               <li key={item.id}>\n                 <span className =\"pink-text\"> {item.user  } </span>\n                 <span>{item.content}</span>\n                 <div className=\"grey-text note-date\">\n                 {moment(item.time.toDate()).fromNow()}\n                 </div>\n               </li>\n             )\n           })}\n         </ul>\n       </div>\n     </div>\n    </div>\n  )\n}\n\nexport default Notifications","import React, { Component } from 'react'\nimport ProjectList from '../projects/ProjectList'\nimport Notifications from './Notifications'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\n\nclass Dashboard extends Component {\n  render() {\n    \n    // console.log(this.props);\n    const { projects, auth, notifications} = this.props;\n    if (!auth.uid) return < Redirect to ='/signin' /> \n    \n    return (\n      <div className=\"dashboard container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <ProjectList projects={projects} />\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notifications notifications ={notifications} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state);\n  return {\n    projects: state.firestore.ordered.projects,\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'projects', orderBy:['createdAt', 'desc'] },\n    { collection: 'notifications', limit: 5, orderBy:['time', 'desc']}\n  ])\n)(Dashboard)","import React from 'react'\nimport { connect } from 'react-redux'\nimport {firestoreConnect} from 'react-redux-firebase'\nimport { compose} from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\nconst ProjectDetails = (props) => {\n  const { project, auth } = props;\n  if(!auth.uid) return <Redirect to ='/signin' />\n\n  if(project){\n    return(\n    <div className=\"container section project-details\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">{project.title}</span>\n          <p>{project.content}</p>\n        </div>\n        <div className=\"card-action grey lighten-4 grey-text\">\n          <div>Posted by {project.authorFirstName} {project.authorLastName}</div>\n          <div>{moment(project.createdAt.toDate()).calendar()}</div>\n        </div>\n      </div>\n    </div>)\n  } else {\n    return(\n      <div className='container center'>\n        <p>Loading project...</p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id= ownProps.match.params.id;\n  const projects = state.firestore.data.projects;\n  const project = projects? projects[id]: null\n  return{\n    project: project,\n    auth: state.firebase.auth\n  }\n}\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    {collection:'projects'}\n  ])\n) (ProjectDetails)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { signIn } from '../../store/actions/authActions'//import action creator signiN\nimport { Redirect } from 'react-router-dom'\n\nclass SignIn extends Component {\n    state ={\n        email: '',\n        password: ''\n    }\n\n    handleChange =(e) =>{\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit =(e) =>{\n        e.preventDefault();\n        this.props.signIn(this.state)// THAT is the credential\n}\n\n    render() {\n        const { authError, auth} = this.props;\n        if(auth.uid) return <Redirect to='/' />\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n                    <div className=\"imput-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"imput-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n                    <div className = \"red-text center\">\n                        { authError? <p>{authError}</p>: null}\n                    </div>\n                    </div>\n                </form>     \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        signIn:(creds) => dispatch(signIn(creds))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { signUp } from '../../store/actions/authActions'\n\nclass SignUp extends Component {\n    state ={\n        email: '',\n        password: '',\n        firstName:'',\n        lastName: ''\n    }\n\n    handleChange =(e) =>{\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit =(e) =>{\n        e.preventDefault();\n        this.props.signUp(this.state)\n    }\n\n    render() {\n        const {auth, authError} = this.props;\n        if(auth.uid) return <Redirect to='/' />\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n                    <div className=\"imput-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"imput-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"imput-field\">\n                        <label htmlFor=\"firstName\">First Name</label>\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"imput-field\">\n                        <label htmlFor=\"lastName\">Last Name</label>\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n                   <div className = \"red-text center\">\n                       {authError ? <p> {authError}</p> : null}\n                   </div>\n                    </div>\n                </form>     \n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return{\n        auth: state.firebase.auth,\n        authError: state.auth.authError\n    }\n}\n\nconst mapDispatchToProps=(dispatch) =>{\n    return{\n        signUp: (newUser) => dispatch(signUp(newUser))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createProject } from '../../store/actions/projectActions'\nimport { Redirect } from 'react-router-dom'\n\nclass CreateProject extends Component {\n  state = {\n    title: '',\n    content: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    this.props.createProject(this.state);\n    this.props.history.push('/');//redirect user to home page after create\n  }\n  render() {\n    const {auth} = this.props;\n    if(!auth.uid) return <Redirect to ='/signin' />\n    return (\n      <div className=\"container\">\n        <form className=\"white\" onSubmit={this.handleSubmit}>\n          <h5 className=\"grey-text text-darken-3\">Create a New Project</h5>\n          <div className=\"input-field\">\n            <input type=\"text\" id='title' onChange={this.handleChange} />\n            <label htmlFor=\"title\">Project Title</label>\n          </div>\n          <div className=\"input-field\">\n            <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\n            <label htmlFor=\"content\">Project Content</label>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1\">Create</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) =>{\n  return{\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createProject: (project) => dispatch(createProject(project))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)","  \nexport const createProject = (project) => {\n  return (dispatch, getState, {getFirestore}) => {\n    // make async call to database\n\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const authorId= getState().firebase.auth.uid;\n    \n    firestore.collection('projects').add({\n      ...project,\n      authorFirstName: profile.firstName,\n      authorLastName: profile.lastName,\n      authorId: authorId,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({ type: 'CREATE_PROJECT_SUCCESS' });\n    }).catch(err => {\n      dispatch({ type: 'CREATE_PROJECT_ERROR' }, err);\n    });\n  }\n};","import React, {Component} from 'react'\nimport{ BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport ProjectDetails from './components/projects/ProjectDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateProject from './components/projects/CreateProject'\n\n\n\n    class App extends Component {\n      render(){\n      return (\n        <BrowserRouter>\n        <div className=\"App\">\n        <Navbar />\n        <Switch>\n        <Route exact path='/' component={Dashboard} />\n        <Route path='/project/:id' component={ProjectDetails}/>\n        <Route path='/signin' component={SignIn} />\n        <Route path='/signup' component={SignUp} />\n        <Route path='/create' component={CreateProject} />\n        </Switch>\n        </div>\n        </BrowserRouter>\n      );\n    }\n    }\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//function\nconst initState = {\n  authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n  switch(action.type){\n    case 'LOGIN_ERROR':\n      console.log('login error');\n    return {\n      ...state, \n      authError: 'Login Failed'\n    }\n    case 'LOGIN_SUCCESS':\n      console.log('login success');\n      return{\n        ...state,\n      authError: null\n      }\n      case 'SIGNOUT_SUCCESS':\n        console.log('signout success');\n        return state;\n      case 'SIGNUP_SUCCESS':\n        console.log('signup success');\n        return{\n          ...state,\n          authError:null\n        }\n        case 'SIGNUP_ERROR' :\n          console.log('signup error')\n          return{\n            ...state,\n            authError: action.err.message\n          }\n      default:\n        return state;\n  }\n}\n\nexport default authReducer;","const initState = {}\n\nconst projectReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'CREATE_PROJECT_SUCCESS':\n      console.log('create project success');\n      return state;\n    case 'CREATE_PROJECT_ERROR':\n      console.log('create project error');\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default projectReducer;","  \nimport authReducer from './authReducer'\nimport projectReducer from './projectReducer'\nimport { combineReducers } from 'redux'\nimport { firestoreReducer} from 'redux-firestore'\nimport { firebaseReducer} from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  project: projectReducer,\n  firestore: firestoreReducer,\n  firebase: firebaseReducer,//will sync the firebase with redux state\n});\n\n\nexport default rootReducer\n\n// the key name will be the data property on the state object","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n  \n  // Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_MEASUREMENT_ID\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.firestore().settings({timestampsInSnapshots:true })\n\n  export default firebase;","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// import { createStore, applyMiddleware, compose } from 'redux'\n// import rootReducer from './store/reducers/rootReducer'\n// import { Provider } from 'react-redux'//binding layer\n// import thunk from 'redux-thunk'\n// import {reduxFirestore, getFirestore} from 'redux-firestore';\n// import {reactReduxFirebase, getFirebase} from 'react-redux-firebase';\n// import fbConfig from './config/fbConfig'\n\n// const store = createStore(rootReducer, \n//     compose(//return store enhancer\n//         applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n//         reactReduxFirebase(fbConfig),//store enhancers\n//         reduxFirestore(fbConfig),//store enhancers\n//     )\n// );//take a list of middleware and enhance store functionality\n\n// ReactDOM.render(<Provider store= {store}> <App /> </Provider>, document.getElementById('root'));\n\n// serviceWorker.unregister();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig'\n\nconst store = createStore(rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n    // reactReduxFirebase(fbConfig, {attachAuthIsReady: true}),\n    reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true}),\n    reduxFirestore(fbConfig) // redux bindings for firestore\n  )\n);\n\nstore.firebaseAuthIsReady.then(()=>{\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n    serviceWorker.unregister();\n})\n\n\n\n"],"sourceRoot":""}